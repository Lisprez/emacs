:PROPERTIES:
:END:

** set sources
  #+BEGIN_SRC emacs-lisp
    (setq package-archives
          '(("elpa" . "http://elpa.emacs-china.org/gnu/")
            ("melpa" . "http://elpa.emacs-china.org/melpa/")
            ("melpa-stable" . "http://stable.melpa.org/packages/")))

    (package-initialize)

    (unless package-archive-contents
      (package-refresh-contents))

    (unless
        (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
  #+END_SRC

** load local code
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/lisp")
     (add-to-list 'load-path "~/.emacs.d/lisp/markdown-dnd-images")
     (use-package eshell-functions)
     (use-package docker-machine-setup)
   #+END_SRC

** global config

   #+BEGIN_SRC emacs-lisp
     (setq-default browse-url-browser-function 'eww-browse-url)
   #+END_SRC

   #+RESULTS:
   : eww-browse-url

   #+BEGIN_SRC emacs-lisp
     (custom-set-variables
      '(auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/" t)))
      '(backup-directory-alist '((".*" . "~/.emacs.d/backups/"))))
   #+END_SRC

   #+RESULTS:

   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode)

     (define-key global-map (kbd "C-x C-n") '(lambda () (interactive) (other-window 1)))
     (define-key global-map (kbd "C-x C-p") '(lambda () (interactive) (other-window -1)))
     (define-key global-map (kbd "C--") 'execute-extended-command)

     (setq backup-by-copying t
           backup-directory-alist
           '(("." . "~/.saves"))
           delete-old-versions t
           kept-new-versions 6
           kept-old-versions 2
           version-control t)

     (set-language-environment "UTF-8")

     ;; select current line
     (defun highlight-current-line ()
       (interactive)
       (set-mark (line-beginning-position))
       (end-of-line))

     (define-key global-map (kbd "C-M-l") 'highlight-current-line)
     (define-key global-map (kbd "C-c ,") 'rename-buffer)


     (use-package exec-path-from-shell
       :ensure)

     (exec-path-from-shell-copy-env "PATH")
     (setenv "TZ" "Asia/Shanghai")


     (when (display-graphic-p)
       (progn
         (setq initial-frame-alist
               '(
                 (width . 106)
                 (height . 50)
                 ))))
   #+END_SRC

   #+RESULTS:
   : 80

   自动更新本配置, 按下f2后需要重新加载init.el

   #+BEGIN_SRC emacs-lisp
     (defun MyConfigAutoUpdate ()
       "autoupdate local git repository .emacs.d"
       (interactive)
       (compilation-start "cd ~/.emacs.d && git pull origin master"))

     (define-key global-map (kbd "<f2>") 'MyConfigAutoUpdate)
   #+END_SRC

   #+RESULTS:
   : MyConfigAutoUpdate


   因为 . 这个键太容易按错了，所以映射alt-, alt-. alt-/ 统一为按下point键位

   #+BEGIN_SRC emacs-lisp
     (defun insert-my-favorite-point ()
       (interactive)
       (insert "."))

     (global-set-key (kbd "M-,") #'insert-my-favorite-point)
     (global-set-key (kbd "M-.") #'insert-my-favorite-point)
     (global-set-key (kbd "M-/") #'insert-my-favorite-point)
   #+END_SRC
   #+RESULTS:
   : insert-my-favorite-point


** org-mode
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure
       :config
       (auto-save-mode)
       (require 'org-crypt)
       (org-crypt-use-before-save-magic)
       (setq org-tags-exclude-from-inheritance (quote ("crypt")))
       (when (and (file-exists-p "~/org")
                  (file-directory-p "~/org"))
         (setq org-agenda-files '("~/org")))
       (setq org-crypt-key "quanwei")
       (define-key org-mode-map (kbd "C-c u d") 'org-decrypt-entry)
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((dot . t)
          (emacs-lisp . t)
          (C . t)
          (js . t)
          (calc . t)
          (octave . t)
          (python . t))))


     ;;; org-mode custom config
     (setq org-clock-into-drawer t)
     (setq org-agenda-include-diary t)
     (setq org-src-fontify-natively t)
     (setq org-confirm-babel-evaluate nil)
     (setq org-image-actual-width 400)
     (setq org-log-done 'time)
     (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-cb" 'org-switchb)

   #+END_SRC

   #+RESULTS:
   : org-switchb

*** OrgCapture
    #+BEGIN_SRC emacs-lisp
      (setq org-capture-templates
            (quote
             (("l" "oh-my-life" entry
                (file "/sync/org/oh-my-life.org")
                "* TODO %?")
               ("w" "for work" entry
                 (file+datetree "/sync/org/work.org")
                 "* TODO %? [%]"))))
    #+END_SRC

    #+RESULTS:
    | l | oh-my-life | entry | (file /sync/org/oh-my-life.org)    | * TODO %?     |
    | w | for work   | entry | (file+datetree /sync/org/work.org) | * TODO %? [%] |

*** org drag image

    拖动图片到org-mode中

    #+BEGIN_SRC emacs-lisp
      (use-package org-download
        :ensure)
    #+END_SRC






** smartparens

   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure
       :init
       (use-package smartparens-config)
       (use-package smartparens-html)
       (use-package smartparens-org)
       (use-package smartparens-python)
       (smartparens-global-mode 1)
       (show-smartparens-global-mode 1)
       :bind (
        ("C-M-f" . sp-forward-sexp)
        ("C-M-b" . sp-backward-sexp)
        ("C-M-n" . sp-next-sexp)
        ("C-M-p" . sp-previous-sexp)
        ("C-M-k" . sp-kill-sexp)
        ("M-[" . sp-unwrap-sexp)))
   #+END_SRC

   #+RESULTS:
   : sp-unwrap-sexp

** nvm

   #+BEGIN_SRC emacs-lisp

     (use-package nvm
       :ensure)


     ;; if install [nvm](https://github.com/creationix/nvm)
     (when (file-exists-p "~/.nvm")
       (let ((versions (nvm--installed-versions)))
         (when versions
           (nvm-use (car (car versions)))
           (when (memq window-system '(mac ns x))
             (exec-path-from-shell-copy-env "NVM_BIN")))))
   #+END_SRC

   #+RESULTS:


   #+BEGIN_SRC emacs-lisp
     (use-package dash
       :ensure)

     ;; 在 eshell-mode 中快速切换不同的eshell
     (defun switch-next-eshell-buffer ()
       (interactive)
       (let* ((eshell-buffer-list
               (-filter
                (lambda (buf)
                  (with-current-buffer buf
                  (equal major-mode 'eshell-mode)))
                (buffer-list)))
              (current-buffer-index
               (or (-find-index (lambda (buf) (equal buf (current-buffer))) eshell-buffer-list)
                   -1)))
         (switch-to-buffer (nth (+ current-buffer-index 1) eshell-buffer-list))))
   #+END_SRC


   #+BEGIN_SRC emacs-lisp

     (define-key global-map (kbd "C-c e n") 'switch-next-eshell-buffer)

     (use-package eshell
       :config
       (remove-hook 'completion-at-point-functions 'pcomplete-completions-at-point t))

     (use-package eshell-git-prompt
       :ensure)


   #+END_SRC

   #+RESULTS:

** input method
   #+BEGIN_SRC emacs-lisp
     (use-package pyim-basedict
       :ensure)
     (use-package pyim
       :ensure
       :config
       (pyim-basedict-enable)
       (setq pyim-page-tooltip 'minibuffer))

     (setq default-input-method "pyim")
   #+END_SRC

   #+RESULTS:
   : pyim

** company
   #+BEGIN_SRC emacs-lisp
     (use-package company-quickhelp
       :ensure)
     (use-package company
       :ensure t
       :config
       (setq company-minimum-prefix-length 1)
       (setq company-dabbrev-downcase nil)
       (setq company-dabbrev-ignore-case nil)
       (setq company-idle-delay 0.5)
       (setq company-echo-delay 0.5)
       (add-hook 'company-mode-hook 'company-quickhelp-mode)
       (define-key company-active-map (kbd "M-n") nil)
       (define-key company-active-map (kbd "M-p") nil)
       (define-key company-active-map (kbd "C-n") 'company-select-next)
       (define-key company-active-map (kbd "<tab>") 'company-select-next)
       (define-key company-active-map (kbd "C-p") 'company-select-previous))

   #+END_SRC

   #+RESULTS:
   : t


** yasnippet

   文字模板, see also: https://github.com/joaotavora/yasnippet

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure
       :config
       (yas-reload-all))

     (use-package yasnippet-snippets
       :ensure)

     ;;; 开启 snippet-company
     (yas-global-mode t)

   #+END_SRC

   #+RESULTS:
   : t

** docker
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :ensure)
   #+END_SRC
** web-mode
   #+BEGIN_SRC emacs-lisp
     (use-package emmet-mode
       :ensure t)

     (use-package nodejs-repl
       :ensure)

     (defun setup-web-mode-company-mode ()
       (setq-local
        company-backends
        '(company-files company-dabbrev company-yasnippet company-keywords company-css)))

     (use-package web-mode
       :ensure t
       :mode (("\\.jsx\\'" . web-mode)
              ("\\.vue\\'" . web-mode)
              ("\\.js\\'" . web-mode)
              ("\\.css\\'" . web-mode)
              ("\\.less\\'" . css-mode)
              ("\\.json\\'" . web-mode)
              ("\\.html\\'" . web-mode))
       :config
       (add-hook 'web-mode-hook 'company-mode)
       (add-hook 'web-mode-hook 'setup-web-mode-company-mode)
       (add-hook 'web-mode-hook 'emmet-mode)
       (add-hook 'web-mode-hook 'smartparens-mode)
       (add-hook 'web-mode-hook 'flycheck-mode)
       (add-hook 'web-mode-hook 'editorconfig-mode)
       (add-hook 'web-mode-hook
         (lambda ()
           (progn
             (setq web-mode-script-padding 0)
             (when (string= web-mode-content-type "jsx")
                                    (progn
                                      (setq-local emmet-expand-jsx-className? t))))))
       (define-key web-mode-map (kbd "C-j") 'emmet-expand-line)
       (define-key web-mode-map (kbd "C-c z z") 'nodejs-repl)
       (define-key web-mode-map (kbd "C-c z r") 'nodejs-repl-send-region)
       (define-key web-mode-map (kbd "C-c z l") 'nodejs-repl-send-last-sexp)
       (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))
       (add-to-list 'web-mode-content-types '("html" . "\\.vue\\'"))
       (add-to-list 'web-mode-content-types '("json" . "\\.json\\'"))
       (add-to-list 'web-mode-content-types '("jsx" . ".\\.js[x]?\\'")))

     (eval-after-load 'flycheck
       '(progn
          (flycheck-add-mode 'html-tidy 'web-mode)
          (flycheck-add-mode 'css-csslint 'web-mode)))

   #+END_SRC

   #+RESULTS:
   | web-mode | web-mode | css-mode |


** emacs-lisp-mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'company-mode)
     (define-key lisp-mode-map (kbd "C-c C-c") 'eval-buffer)
     (define-key emacs-lisp-mode-map (kbd "C-c C-c") 'eval-buffer)

   #+END_SRC

   #+RESULTS:
   : eval-buffer

** haskell-mode
   #+BEGIN_SRC emacs-lisp
     (use-package haskell-mode
       :ensure
       :config
       (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-compile))
   #+END_SRC
** dash
   #+BEGIN_SRC emacs-lisp
     (use-package counsel-dash
       :ensure
       :config
       (setq counsel-dash-browser-func 'browse-web)
       :bind (("C-c C-v a" . counsel-dash-activate-docset)
              ("C-c C-v q" . counsel-dash)))
   #+END_SRC
** ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure
       :config
       (ivy-mode t)
       (setq ivy-use-virtual-buffers t)
       (setq enable-recursive-minibuffers t)
       (define-key global-map (kbd "C-x C-b") 'ivy-switch-buffer)
       (define-key global-map (kbd "C-s") 'swiper)
       (define-key global-map (kbd "C-x C-f") 'counsel-find-file)
       (define-key global-map (kbd "M-x") 'counsel-M-x))
   #+END_SRC
** whitespace-cleanup
   #+BEGIN_SRC emacs-lisp
     (use-package whitespace-cleanup-mode
       :ensure t
       :config
       (add-hook 'before-save-hook 'whitespace-cleanup))
   #+END_SRC
** magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure
       :init
       (use-package magit-blame)
       :bind (("C-c g c" . magit-checkout)
              ("C-c g f c" . magit-file-checkout)))
   #+END_SRC

   #+RESULTS:

** avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind (("M-1" . avy-goto-char)
              ("M-2" . avy-goto-char-2)
              ("M-l" . avy-goto-line)))
   #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (setq projectile-create-missing-test-files t)
       (setq projectile-enable-caching t)
       (setq projectile-require-project-root nil)
       (projectile-register-project-type
        'npm '("package.json")
        :compile "npm run build"
        :test "npm run test"
        :run "npm run start"
        :test-suffix ".spec"))

   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
   (projectile-global-mode)


   #+END_SRC

   #+RESULTS:
   : projectile-command-map


** hackernews
   #+BEGIN_SRC emacs-lisp
     (use-package hackernews
       :ensure
       :bind ("C-c C-h C-n" . hackernews)
       :config
       (setq hackernews-top-story-limit 50))
   #+END_SRC
** theme
   #+BEGIN_SRC emacs-lisp
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(markdown-code-face ((t (:inherit fixed-pitch :background "gray20" :foreground "dark orange"))))
      '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 2.0))))
      '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.8)))))


   #+END_SRC
** dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure
       :init
       (dashboard-setup-startup-hook)
       :config
       (setq dashboard-banner-logo-title "Happy Emacs")
       (setq dashboard-startup-banner "~/.emacs.d/logo.png")
       (setq dashboard-items
             '((recents . 5)
               (bookmarks . 5)
               (projects . 3)
               (agenda . 5))))
   #+END_SRC

** diminish
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure
       :init
       (diminish 'projectile-mode)
       (diminish 'flycheck-mode)
       (diminish 'company-mode)
       (diminish 'guide-key-mode)
       (diminish 'ivy-mode))
   #+END_SRC
** pass
   #+BEGIN_SRC emacs-lisp
     (use-package pass
       :ensure
       :config
       (setq password-store-executable "pass"))
   #+END_SRC

   #+RESULTS:
   : t

** MacOs
   #+BEGIN_SRC emacs-lisp
     (defun copy-from-osx ()
       (shell-command-to-string "pbpaste"))

     (defun paste-to-osx (text &optional push)
       (let ((process-connection-type nil))
         (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
           (process-send-string proc text)
           (process-send-eof proc))))
     (if (string-equal system-type "cygwin")
         (progn
           (setq interprogram-cut-function 'paste-to-osx)
           (setq interprogram-paste-function 'copy-from-osx)
           ))
   #+END_SRC
** 显示设置
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (menu-bar-mode 0)
     (tool-bar-mode 0)

     (setq frame-title-format
           (list (format "%s %%S: %%j" (system-name))
                 '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

     (eval-after-load
         'compile
       '(add-hook 'compilation-filter-hook
                  (lambda () (ansi-color-process-output nil))))

     (display-time-mode)
     (when (display-graphic-p)
       (scroll-bar-mode -1))

   #+END_SRC
** helpful
   #+BEGIN_SRC emacs-lisp
     (use-package helpful
       :ensure
       :bind
       (
        ("C-h f" . helpful-function)
        ("C-h g" . helpful-macro)))
   #+END_SRC
** editorconfig
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :ensure)
   #+END_SRC
** python-mode
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure
       :config
       (setq elpy-rpc-backend "jedi"))

     (use-package python-mode
       :ensure)

   #+END_SRC


** markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure
       :config
       (define-key markdown-mode-map (kbd "C-c C-c") 'markdown-preview-mode))
     (use-package markdown-preview-mode
       :ensure t
       :defer t)
   #+END_SRC
** comint
   #+BEGIN_SRC emacs-lisp
     (use-package comint
       :config
       (add-hook 'comint-mode-hook 'company-mode))
   #+END_SRC

   #+RESULTS:
   : t
** dimmer

#+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :ensure
    :init
    (dimmer-activate))
#+END_SRC

#+RESULTS:


** common lisp

   #+BEGIN_SRC emacs-lisp
     (use-package slime
       :ensure
       :config
       (setq inferior-lisp-program "sbcl"))
   #+END_SRC
** which-key

   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure
       :init
       (which-key-mode))
   #+END_SRC

   #+RESULTS:

** blog

   #+BEGIN_SRC emacs-lisp
     (setq org-publish-project-alist
           '(
             ("org-quanwei"
              :base-directory "/app/git/blog/org"
              :base-extension "org"

              :publishing-directory "/app/git/blog/_posts/"
              :recursive t
              :publishing-function org-html-publish-to-html
              :headline-levels 4
              :body-only t)
             ("org-quanwei-static"
              :base-directory "/app/git/blog/org"
              :base-extension "css|js|jpg|png|gif"
              :publishing-directory "/app/git/blog/content/"
              :recursive t
              :publishing-function org-publish-attachment)

             ("quanwei" :components ("org-quanwei" "org-quanwei-static"))))
   #+END_SRC

   #+RESULTS:
   | org-quanwei        | :base-directory | /app/git/blog/org                | :base-extension | org | :publishing-directory | /app/git/blog/_posts/ | :recursive | t   | :publishing-function  | org-html-publish-to-html | :headline-levels | 4 | :body-only           | t                      |
   | org-quanwei-static | :base-directory | /app/git/blog/org                | :base-extension | css | js                    | jpg                   | png        | gif | :publishing-directory | /app/git/blog/content/   | :recursive       | t | :publishing-function | org-publish-attachment |
   | quanwei            | :components     | (org-quanwei org-quanwei-static) |                 |     |                       |                       |            |     |                       |                          |                  |   |                      |                        |
** scheme

** emacs-application-framework

   #+BEGIN_SRC emacs-lisp
   #+END_SRC
** dictionary

*** youdao
   #+BEGIN_SRC emacs-lisp
     (use-package youdao-dictionary
       :ensure t
       :bind (("C-c t y" . youdao-dictionary-search-at-point+)
              ("C-c t C-y" . youdao-dictionary-play-voice-at-point)))
   #+END_SRC

   #+RESULTS:
   : youdao-dictionary-play-voice-at-point

*** webster
#+BEGIN_SRC emacs-lisp
  (use-package mw-thesaurus
   :ensure
   :bind (("C-c t w" . mw-thesaurus--lookup-at-point)))
#+END_SRC

#+RESULTS:
: mw-thesaurus--lookup-at-point

** expand-region

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure)
  (global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

#+RESULTS:
: er/expand-region
